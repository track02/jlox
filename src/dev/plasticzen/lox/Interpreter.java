package dev.plasticzen.lox;

/*
  The interpreter takes the syntax tree generated by the parser and
  produces values from the expressions it consists of

  Lox values are created by literals, computer by expressions and stored in variables
  The user sees these as Lox 'objects' but in reality they are implemented in the underlying language
  the interpreter is written in, Java

  We can use Java's object type for our dynamic Lox values as it allows us to check the type of a value at runtime (instanceof)
  Java also provides boxed versions of its primitive types which subclass object, these can be used for Lox's built in types

  So:

  Lox Type              Java Representation
  Any Lox Value         Object
  nil                   null
  Boolean               Boolean
  number                Double
  string                String

  The Interpreter will use the Visitor pattern and upon visiting an expression will return an Object

 */

public class Interpreter implements Expr.Visitor<Object>{


    /*
     * Literals form the leaves of our tree, the atomic bits of syntax which other expressions are made of
     * Note that Literals are values but *syntax* that produces a value
     */

    /**
     * Converts a literal expression into a runtime value
     * @param expr Literal expression
     * @return Object value
     */
    @Override
    public Object visitLiteralExpr(Expr.Literal expr){
        return expr.value;
    }

}
